[tool.poetry]
name = "pypercrypt"
version = "0.3.0"
description = "pypercrypt uses battle-tested cryptography to encrypt your data with the passphrase of your choice and stores the ciphertext inside a QR code."
authors = ["Tom Wolfsk√§mpf <tom@wolfskaempf.de>"]
readme = "README.md"
license = "EUPL"

[tool.poetry.dependencies]
python = "^3.11"
cryptography = "^41.0.5"
typer = "^0.9.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1.3"
mypy = "^1.6.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins]

[tool.poetry.scripts]
pypercrypt = "pypercrypt.main:app"

[project]
name = "pypercrypt"
requires-python = ">=3.11"

[tool.ruff.lint]
select = [
  "UP",    # pyupgrade
  "D",     # pydocstyle
  "ANN",   # flake8-annotations
  "E",     # pycodestyle
  "F",     # Pyflakes
  "B",     # flake8-bugbear
  "SIM",   # flake8-simplify
  "I",     # isort
  "S",     # flake8-bandit
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  "CPY",   # flake8-copyright
  "C4",    # flake8-comprehensions
  "EXE",   # flake8-executable
  "ICN",   # flake8-import-conventions
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "SIM",   # flake8-simplify
  "PTH",   # flake8-use-pathlib
  "PERF",  # Perflint
  "FURB",  # refurb
  "RUF",   # Ruff-specific rules
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.flake8-copyright]
# Avoid enforcing a header on files smaller than 1024 bytes.
min-file-size = 1024
